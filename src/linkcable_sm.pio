; Program name
.program linkcable_sm

.wrap_target
    wait 0 gpio 0           ; wait for falling edge

    pull noblock            ; pull value for transmission from pico
    out null, 24            ; shift left by 24

    nop [29]
    nop [31]

    out pins, 1             ; out the MSB bit

    wait 1 gpio 0           ; wait for rising edge

    nop [31]
    nop [31]

    in pins, 1              ; input MSB bit

    set  x, 6
bitloop:
        wait 0 gpio 0       ; wait for falling edge

        nop [31]
        nop [31]

        out pins, 1         ; output rest of the bits one by one

        wait 1 gpio 0       ; wait for rising edge

        nop [31]
        nop [31]

        in pins, 1          ; input rest of the bits one by one
    jmp x-- bitloop         ; loop through the rest of the bits

    push noblock            ; push the received value to pico
    irq 0
.wrap

% c-sdk {
#define PIN_SCK             0
#define PIN_SIN             1
#define PIN_SOUT            2

static inline void linkcable_sm_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = linkcable_sm_program_get_default_config(offset);

    pio_sm_set_consecutive_pindirs(pio, sm, PIN_SCK, 1, false);

    sm_config_set_in_pins(&c, PIN_SIN);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_SIN, 1, false);
    sm_config_set_in_shift(&c, false, false, LINKCABLE_BITS);

    sm_config_set_out_pins(&c, PIN_SOUT, 1);
    pio_sm_set_consecutive_pindirs(pio, sm, PIN_SOUT, 1, true);
    sm_config_set_out_shift(&c, false, false, LINKCABLE_BITS);

//    sm_config_set_clkdiv(&c, 5);                // Set clock division (Commented out, this one runs at full speed)

    pio_gpio_init(pio, PIN_SCK);
    pio_gpio_init(pio, PIN_SIN);
    pio_gpio_init(pio, PIN_SOUT);

    pio_sm_init(pio, sm, offset, &c);

//    pio_sm_set_enabled(pio, sm, true);          // Set the state machine running (commented out, I'll start this in the C)
}
%}